#pragma once
#include "types.hpp"
#include <string>

enum class EventType {
    TICK, 
    SIGNAL,
    ORDER,
    FILL
};

// Base class for all event
class Event {
public:
    Event(EventType type) : type(type) {}
    EventType getType() const { return type;}
    virtual ~Event() = default;
private:
    EventType type;
};

// Fire when new market data is available
// Generated by the data handler
class TickEvent : public Event {
public:
    TickEvent(const OHLC& ohlcData) 
        : Event(EventType::TICK), ohlcData(ohlcData) {}

    TickEvent(OHLC&& ohlcData) 
        : Event(EventType::TICK), ohlcData(std::move(ohlcData)) {}

    const OHLC& getOHLCData() const { return ohlcData; }

private:
    OHLC ohlcData; // Timestamp, Open, High, Low, Close, Volume
};

// Fire when a trading signal is generated
// Generated by the strategy
class SignalEvent : public Event {
public:
    SignalEvent() : Event(EventType::SIGNAL) {}
    // Additional data specific to SignalEvent can be added here
private:
    std::string symbol; 
    bool isBuyOrder; 
    long timestamp;
};
// Fire when an order is created
// Generated by the portfolio and order manager
class OrderEvent : public Event {
public:
    OrderEvent() : Event(EventType::ORDER) {}
    // Additional data specific to OrderEvent can be added here
private:
    std::string symbol; 
    int quantity; 
    double price; 
    long timestamp; 
    bool isBuyOrder; // true for buy, false for sell
};
// Fire when an order is filled
// Generated by the exchange or broker
class FillEvent : public Event {
public:
    FillEvent() : Event(EventType::FILL) {}
    // Additional data specific to FillEvent can be added here
private:
    std::string symbol; 
    int quantity; 
    double price; 
    long timestamp; 
    bool isBuyOrder; // true for buy, false for sell
};